// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © mojtaba_trading_dev

//@version=5
indicator("Ichimoku Cross Filter", overlay = true)

input_timeframe = input.timeframe("1D", "TimeFrame")
input_shift     = input.int(0, "Shift")

// ====== Symbols List ======
//     "BINANCE:BTCUSDT"
//     "BINANCE:ETHUSDT"
//     "BINANCE:NEOUSDT"
//     "BINANCE:SOLUSDT"
//     "BINANCE:XRPUSDT"
// ==========================

tf_warnning_massage = ""
if timeframe.in_seconds(input_timeframe) < timeframe.in_seconds()
    input_timeframe := timeframe.period
    tf_warnning_massage := "Timeframe Changed. Lower the charts timeframe to avoid this."
pre_index = 1
var report_table = table.new(position.top_right, 1, 3, color.gray)

conditional_text_report(bool condition, string symbol, string event_and_rest_of_the_text) =>
    text_report = ""
    if condition == true
        text_report := symbol + event_and_rest_of_the_text
    text_report

prepare_filter_parameters(const string sym, string tf, int shift) =>
    _close          = request.security(sym, tf, close[shift])
    tenken_sen      = request.security(sym, tf, (ta.highest(9) + ta.lowest(9))[shift])/2
    kijun_sen       = request.security(sym, tf, (ta.highest(26) + ta.lowest(26))[shift])/2
    senku_span_a    = request.security(sym, tf, (ta.highest(9) + ta.lowest(9) + ta.highest(26) + ta.lowest(26))[25 + shift])/2
    senku_span_b    = request.security(sym, tf, (ta.highest(52) + ta.lowest(52))[25 + shift])/2
    [_close, tenken_sen, kijun_sen, senku_span_a, senku_span_b]

generate_filter_report(string symbol, float _close, float tenken_sen, float kijun_sen, float senku_span_a, float senku_span_b) =>
    filter_report = ""
    filter_report += conditional_text_report(_close > tenken_sen and _close[1] <= tenken_sen[1], symbol , " : Tenken-sen crossover\n")
    filter_report += conditional_text_report(_close < tenken_sen and _close[1] >= tenken_sen[1], symbol , " : Tenken-sen crossunder\n")
    filter_report += conditional_text_report(_close > kijun_sen and _close[1] <= kijun_sen[1], symbol , " : Kijun-sen crossover\n")
    filter_report += conditional_text_report(_close < kijun_sen and _close[1] >= kijun_sen[1], symbol , " : Kijun-sen crossunder\n")
    filter_report += conditional_text_report(_close > senku_span_a and _close > senku_span_b and
     (_close[1] <= senku_span_a[1] or _close[1] <= senku_span_b[1]), symbol , " : Ichimoku Cloud broke-up\n")
    filter_report += conditional_text_report(_close < senku_span_a and _close < senku_span_b and
     (_close[1] >= senku_span_a[1] or close[1] >= senku_span_b[1]), symbol , " : Ichimoku Cloud broke-down\n")
    filter_report

[close_btc, tenken_sen_btc, kijun_sen_btc, senku_span_a_btc, senku_span_b_btc] = prepare_filter_parameters("BINANCE:BTCUSDT", input_timeframe, input_shift)
[close_eth, tenken_sen_eth, kijun_sen_eth, senku_span_a_eth, senku_span_b_eth] = prepare_filter_parameters("BINANCE:ETHUSDT", input_timeframe, input_shift)
[close_neo, tenken_sen_neo, kijun_sen_neo, senku_span_a_neo, senku_span_b_neo] = prepare_filter_parameters("BINANCE:NEOUSDT", input_timeframe, input_shift)
[close_sol, tenken_sen_sol, kijun_sen_sol, senku_span_a_sol, senku_span_b_sol] = prepare_filter_parameters("BINANCE:SOLUSDT", input_timeframe, input_shift)
[close_xrp, tenken_sen_xrp, kijun_sen_xrp, senku_span_a_xrp, senku_span_b_xrp] = prepare_filter_parameters("BINANCE:XRPUSDT", input_timeframe, input_shift)

report_text = ""
report_text := ""
report_text += generate_filter_report("BINANCE:BTCUSDT", close_btc, tenken_sen_btc, kijun_sen_btc, senku_span_a_btc, senku_span_b_btc)
report_text += generate_filter_report("BINANCE:ETHUSDT", close_eth, tenken_sen_eth, kijun_sen_eth, senku_span_a_eth, senku_span_b_eth)
report_text += generate_filter_report("BINANCE:NEOUSDT", close_neo, tenken_sen_neo, kijun_sen_neo, senku_span_a_neo, senku_span_b_neo)
report_text += generate_filter_report("BINANCE:SOLUSDT", close_sol, tenken_sen_sol, kijun_sen_sol, senku_span_a_sol, senku_span_b_sol)
report_text += generate_filter_report("BINANCE:XRPUSDT", close_xrp, tenken_sen_xrp, kijun_sen_xrp, senku_span_a_xrp, senku_span_b_xrp)

if barstate.islast
    report_table.cell(0, 0, "Report [Timeframe:" + input_timeframe + "]", text_color = color.white, text_size = size.large)
    report_table.cell(0, 1, tf_warnning_massage, text_color = color.red, text_halign = text.align_left)
    report_table.cell(0, 2, report_text , text_color = color.white, text_halign = text.align_left)