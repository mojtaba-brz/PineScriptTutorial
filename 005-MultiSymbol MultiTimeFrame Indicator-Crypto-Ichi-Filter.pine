// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © mojtaba_trading_dev

//@version=5
indicator("Ichimoku Cross Filter", overlay = true)

input_timeframe = input.timeframe("1D", "TimeFrame")
input_shift     = input.int(0, "Shift")
// ====== Symbols List ======
//     "BINANCE:BTCUSDT"
//     "BINANCE:ETHUSDT"
//     "BINANCE:NEOUSDT"
//     "BINANCE:SOLUSDT"
//     "BINANCE:XRPUSDT"
// ==========================
var report_table = table.new(position.top_right, 1, 2, color.gray)

conditional_text_report(bool condition, string symbol, string event_and_rest_of_the_text) =>
    text_report = ""
    if condition == true
        text_report := symbol + event_and_rest_of_the_text
    text_report

close_btc           = request.security("BINANCE:BTCUSDT", input_timeframe, close)[input_shift]
tenken_sen_btc      = (request.security("BINANCE:BTCUSDT", input_timeframe, ta.highest(9)) + request.security("BINANCE:BTCUSDT", input_timeframe, ta.lowest(9)))[input_shift]/2
kijun_sen_btc       = (request.security("BINANCE:BTCUSDT", input_timeframe, ta.highest(26)) + request.security("BINANCE:BTCUSDT", input_timeframe, ta.lowest(26)))[input_shift]/2
senku_span_a_btc    = (tenken_sen_btc + kijun_sen_btc)[25]/2
senku_span_b_btc    = (request.security("BINANCE:BTCUSDT", input_timeframe, ta.highest(52)) + request.security("BINANCE:BTCUSDT", input_timeframe, ta.lowest(52)))[25 + input_shift]/2

close_eth           = request.security("BINANCE:ETHUSDT", input_timeframe, close)[input_shift]
tenken_sen_eth      = (request.security("BINANCE:ETHUSDT", input_timeframe, ta.highest(9)) + request.security("BINANCE:ETHUSDT", input_timeframe, ta.lowest(9)))[input_shift]/2
kijun_sen_eth       = (request.security("BINANCE:ETHUSDT", input_timeframe, ta.highest(26)) + request.security("BINANCE:ETHUSDT", input_timeframe, ta.lowest(26)))[input_shift]/2
senku_span_a_eth    = (tenken_sen_eth + kijun_sen_eth)[25]/2
senku_span_b_eth    = (request.security("BINANCE:ETHUSDT", input_timeframe, ta.highest(52)) + request.security("BINANCE:ETHUSDT", input_timeframe, ta.lowest(52)))[25 + input_shift]/2

close_neo           = request.security("BINANCE:NEOUSDT", input_timeframe, close)[input_shift]
tenken_sen_neo      = (request.security("BINANCE:NEOUSDT", input_timeframe, ta.highest(9)) + request.security("BINANCE:NEOUSDT", input_timeframe, ta.lowest(9)))[input_shift]/2
kijun_sen_neo       = (request.security("BINANCE:NEOUSDT", input_timeframe, ta.highest(26)) + request.security("BINANCE:NEOUSDT", input_timeframe, ta.lowest(26)))[input_shift]/2
senku_span_a_neo    = (tenken_sen_neo + kijun_sen_neo)[25]/2
senku_span_b_neo    = (request.security("BINANCE:NEOUSDT", input_timeframe, ta.highest(52)) + request.security("BINANCE:NEOUSDT", input_timeframe, ta.lowest(52)))[25 + input_shift]/2

close_sol           = request.security("BINANCE:SOLUSDT", input_timeframe, close)[input_shift]
tenken_sen_sol      = (request.security("BINANCE:SOLUSDT", input_timeframe, ta.highest(9)) + request.security("BINANCE:SOLUSDT", input_timeframe, ta.lowest(9)))[input_shift]/2
kijun_sen_sol       = (request.security("BINANCE:SOLUSDT", input_timeframe, ta.highest(26)) + request.security("BINANCE:SOLUSDT", input_timeframe, ta.lowest(26)))[input_shift]/2
senku_span_a_sol    = (tenken_sen_sol + kijun_sen_sol)[25]/2
senku_span_b_sol    = (request.security("BINANCE:SOLUSDT", input_timeframe, ta.highest(52)) + request.security("BINANCE:SOLUSDT", input_timeframe, ta.lowest(52)))[25 + input_shift]/2

close_xrp           = request.security("BINANCE:XRPUSDT", input_timeframe, close)[input_shift]
tenken_sen_xrp      = (request.security("BINANCE:XRPUSDT", input_timeframe, ta.highest(9)) + request.security("BINANCE:XRPUSDT", input_timeframe, ta.lowest(9)))[input_shift]/2
kijun_sen_xrp       = (request.security("BINANCE:XRPUSDT", input_timeframe, ta.highest(26)) + request.security("BINANCE:XRPUSDT", input_timeframe, ta.lowest(26)))[input_shift]/2
senku_span_a_xrp    = (tenken_sen_xrp + kijun_sen_xrp)[25]/2
senku_span_b_xrp    = (request.security("BINANCE:XRPUSDT", input_timeframe, ta.highest(52)) + request.security("BINANCE:XRPUSDT", input_timeframe, ta.lowest(52)))[25 + input_shift]/2

if barstate.islast
    report_table.cell(0, 0, "Report [TF:" + input_timeframe + "]", text_color = color.white, text_size = size.large)
    report_text = ""

    report_text += conditional_text_report(close_btc > tenken_sen_btc and close_btc[1] <= tenken_sen_btc[1], "BINANCE:BTCUSDT" , " : Tenken-sen crossover\n")
    report_text += conditional_text_report(close_btc < tenken_sen_btc and close_btc[1] >= tenken_sen_btc[1], "BINANCE:BTCUSDT" , " : Tenken-sen crossunder\n")
    report_text += conditional_text_report(close_btc > kijun_sen_btc and close_btc[1] <= kijun_sen_btc[1], "BINANCE:BTCUSDT" , " : Kijun-sen crossover\n")
    report_text += conditional_text_report(close_btc < kijun_sen_btc and close_btc[1] >= kijun_sen_btc[1], "BINANCE:BTCUSDT" , " : Kijun-sen crossunder\n")
    report_text += conditional_text_report(close_btc > senku_span_a_btc and close_btc > senku_span_b_btc and
     (close_btc <= senku_span_a_btc or close_btc <= senku_span_b_btc), "BINANCE:BTCUSDT" , " : Ichimoku Cloud broke-up\n")
    report_text += conditional_text_report(close_btc < senku_span_a_btc and close_btc < senku_span_b_btc and
     (close_btc >= senku_span_a_btc or close_btc >= senku_span_b_btc), "BINANCE:BTCUSDT" , " : Ichimoku Cloud broke-down\n")

    report_text += conditional_text_report(close_eth > tenken_sen_eth and close_eth[1] <= tenken_sen_eth[1], "BINANCE:ETHUSDT" , " : Tenken-sen crossover\n")
    report_text += conditional_text_report(close_eth < tenken_sen_eth and close_eth[1] >= tenken_sen_eth[1], "BINANCE:ETHUSDT" , " : Tenken-sen crossunder\n")
    report_text += conditional_text_report(close_eth > kijun_sen_eth and close_eth[1] <= kijun_sen_eth[1], "BINANCE:ETHUSDT" , " : Kijun-sen crossover\n")
    report_text += conditional_text_report(close_eth < kijun_sen_eth and close_eth[1] >= kijun_sen_eth[1], "BINANCE:ETHUSDT" , " : Kijun-sen crossunder\n")
    report_text += conditional_text_report(close_eth > senku_span_a_eth and close_eth > senku_span_b_eth and
     (close_eth <= senku_span_a_eth or close_eth <= senku_span_b_eth), "BINANCE:ETHUSDT" , " : Ichimoku Cloud broke-up\n")
    report_text += conditional_text_report(close_eth < senku_span_a_eth and close_eth < senku_span_b_eth and
     (close_eth >= senku_span_a_eth or close_eth >= senku_span_b_eth), "BINANCE:ETHUSDT" , " : Ichimoku Cloud broke-down\n")

    report_text += conditional_text_report(close_neo > tenken_sen_neo and close_neo[1] <= tenken_sen_neo[1], "BINANCE:NEOUSDT" , " : Tenken-sen crossover\n")
    report_text += conditional_text_report(close_neo < tenken_sen_neo and close_neo[1] >= tenken_sen_neo[1], "BINANCE:NEOUSDT" , " : Tenken-sen crossunder\n")
    report_text += conditional_text_report(close_neo > kijun_sen_neo and close_neo[1] <= kijun_sen_neo[1], "BINANCE:NEOUSDT" , " : Kijun-sen crossover\n")
    report_text += conditional_text_report(close_neo < kijun_sen_neo and close_neo[1] >= kijun_sen_neo[1], "BINANCE:NEOUSDT" , " : Kijun-sen crossunder\n")
    report_text += conditional_text_report(close_neo > senku_span_a_neo and close_neo > senku_span_b_neo and
     (close_neo <= senku_span_a_neo or close_neo <= senku_span_b_neo), "BINANCE:NEOUSDT" , " : Ichimoku Cloud broke-up\n")
    report_text += conditional_text_report(close_neo < senku_span_a_neo and close_neo < senku_span_b_neo and
     (close_neo >= senku_span_a_neo or close_neo >= senku_span_b_neo), "BINANCE:NEOUSDT" , " : Ichimoku Cloud broke-down\n")

    report_text += conditional_text_report(close_sol > tenken_sen_sol and close_sol[1] <= tenken_sen_sol[1], "BINANCE:SOLUSDT" , " : Tenken-sen crossover\n")
    report_text += conditional_text_report(close_sol < tenken_sen_sol and close_sol[1] >= tenken_sen_sol[1], "BINANCE:SOLUSDT" , " : Tenken-sen crossunder\n")
    report_text += conditional_text_report(close_sol > kijun_sen_sol and close_sol[1] <= kijun_sen_sol[1], "BINANCE:SOLUSDT" , " : Kijun-sen crossover\n")
    report_text += conditional_text_report(close_sol < kijun_sen_sol and close_sol[1] >= kijun_sen_sol[1], "BINANCE:SOLUSDT" , " : Kijun-sen crossunder\n")
    report_text += conditional_text_report(close_sol > senku_span_a_sol and close_sol > senku_span_b_sol and
     (close_sol <= senku_span_a_sol or close_sol <= senku_span_b_sol), "BINANCE:SOLUSDT" , " : Ichimoku Cloud broke-up\n")
    report_text += conditional_text_report(close_sol < senku_span_a_sol and close_sol < senku_span_b_sol and
     (close_sol >= senku_span_a_sol or close_sol >= senku_span_b_sol), "BINANCE:SOLUSDT" , " : Ichimoku Cloud broke-down\n")

    report_text += conditional_text_report(close_sol > tenken_sen_xrp and close_xrp[1] <= tenken_sen_xrp[1], "BINANCE:XRPUSDT" , " : Tenken-sen crossover\n")
    report_text += conditional_text_report(close_xrp < tenken_sen_xrp and close_xrp[1] >= tenken_sen_xrp[1], "BINANCE:XRPUSDT" , " : Tenken-sen crossunder\n")
    report_text += conditional_text_report(close_xrp > kijun_sen_xrp and close_xrp[1] <= kijun_sen_xrp[1], "BINANCE:XRPUSDT" , " : Kijun-sen crossover\n")
    report_text += conditional_text_report(close_xrp < kijun_sen_xrp and close_xrp[1] >= kijun_sen_xrp[1], "BINANCE:XRPUSDT" , " : Kijun-sen crossunder\n")
    report_text += conditional_text_report(close_xrp > senku_span_a_xrp and close_xrp > senku_span_b_xrp and
     (close_xrp <= senku_span_a_xrp or close_xrp <= senku_span_b_xrp), "BINANCE:XRPUSDT" , " : Ichimoku Cloud broke-up\n")
    report_text += conditional_text_report(close_xrp < senku_span_a_xrp and close_xrp < senku_span_b_xrp and
     (close_xrp >= senku_span_a_xrp or close_xrp >= senku_span_b_xrp), "BINANCE:XRPUSDT" , " : Ichimoku Cloud broke-down\n")
     
    report_table.cell(0, 1, report_text , text_color = color.white, text_halign = text.align_left)